<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style x:Key="BorderlessTextBoxStyle" TargetType="TextBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style TargetType="TreeViewItem">
        <Style.Resources>
            <!-- Resources omitted for clarity… -->
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid Margin="1">
                        <Grid.RowDefinitions>
                            <!--The top row contains the item's content.-->
                            <RowDefinition Height="Auto" />
                            <!--The bottom row contains the item's children.-->
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!-- This Border and ContentPresenter displays the
               content of the TreeViewItem. -->
                        <!--<Border Name="Bd"
                                Background="White"
                                BorderBrush="Black"
                                BorderThickness="0.6"
                                Padding="2"
                                >-->
                        <ContentPresenter Name="PART_Header"                 
                                              ContentSource="Header"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        <!--</Border>-->



                        <!-- The ItemsPresenter displays the item's children. -->
                        <ItemsPresenter Grid.Row="1"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--When the item is selected in the TreeView, use the
              "selected" colors and give it a drop shadow. -->
                        <!--<Trigger Property="IsSelected" Value="True">
                            <Setter
                                  TargetName="Bd"
                                  Property="Panel.Background"                    
                                  Value="Aqua" />
                            <Setter
                                  TargetName="Bd"
                                  Property="Border.BorderBrush"                    
                                  Value="Black" />
                            <Setter
                                  TargetName="Bd"
                                  Property="TextElement.Foreground"                  
                                  Value="{DynamicResource
                                    {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Make each TreeViewItem show it's children
       in a horizontal StackPanel. -->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel
                          HorizontalAlignment="Center"
                          IsItemsHost="True"
                          Margin="1"
                          Orientation="Vertical"  />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{StaticResource DarkShadesBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock x:Name="cb" Style="{StaticResource CheckboxUnchecked}" FontSize="15" Foreground="{TemplateBinding Foreground}" Margin="0,0,4,0"/>
                        <ContentPresenter/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="cb" Property="Style" Value="{StaticResource CheckboxChecked}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
                        <ContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource DarkShadesBrush}"/>
        <Setter Property="Background" Value="{StaticResource LightShadesBrush}"/>
        <Setter Property="BorderThickness" Value="0.1"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightShadesBrush}"/>
        <Setter Property="BitmapEffect">
            <Setter.Value>
                <DropShadowBitmapEffect Color="{StaticResource DarkShades}" Direction="315" ShadowDepth="2" Softness="0" Opacity="0.1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="2"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightAccentBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource LightAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BitmapEffect">
                    <Setter.Value>
                        <DropShadowBitmapEffect Color="{StaticResource DarkShades}" Direction="315" ShadowDepth="2" Softness="0" Opacity="0"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform X="1" Y="1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource ButtonStyle}"/>


    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="{StaticResource LightShades}"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="{StaticResource Gray}"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="{StaticResource LightAccent}"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="Transparent"/>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true"
                            CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>